/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Thanos Theodoropoulos
 */
public class DBTablesManager {
    /*---------------------CREATE TABLES SECTION-----------------------*/
    //Content Table constructor
    public static void createContentTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "CONTENT")) {
                String createTableSQL = "CREATE TABLE content ("
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "drawTime BIGINT NOT NULL, "
                        + "status VARCHAR(30) NOT NULL, "
                        + "drawBreak INTEGER NOT NULL, "
                        + "visualDraw INTEGER NOT NULL, "
                        + "PRIMARY KEY (gameID, drawID))";
                Statement statement = connection.createStatement();
                statement.execute(createTableSQL);
                statement.close();
                connection.close();
            }
            } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }     
    }
    
    //Price Points Table constructor
    public static void createPPTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "PRICEPOINTS")) {
                String createTableSQL = "CREATE TABLE pricePoints ("
                        + "INDEX INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "amount DOUBLE NOT NULL, "
                        + "FOREIGN KEY (gameID, drawID) REFERENCES content(gameID, drawID) ON DELETE CASCADE ON UPDATE RESTRICT)";
                Statement statement = connection.createStatement();
                statement.execute(createTableSQL);
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    //Prize Categories Table constructor
    public static void createPCTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "PRIZECATEGORIES")) {
                String createTableSQL = "CREATE TABLE prizeCategories ("
                        + "INDEX INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "categoryID INTEGER NOT NULL, "
                        + "divident DOUBLE NOT NULL, "
                        + "winners INTEGER NOT NULL, "
                        + "distributed DOUBLE NOT NULL, "
                        + "jackpot DOUBLE NOT NULL, "
                        + "fixed DOUBLE NOT NULL, "
                        + "categoryType INTEGER NOT NULL, "
                        + "gameType VARCHAR(30) NOT NULL, "
                        + "FOREIGN KEY (gameID, drawID) REFERENCES content(gameID, drawID) ON DELETE CASCADE ON UPDATE RESTRICT)";
                Statement statement = connection.createStatement();
                statement.execute(createTableSQL);
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Wager Statistics Table constructor
    public static void createWSTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "WAGERSTATISTICS")) {
                String createTableSQL = "CREATE TABLE wagerStatistics ("
                        + "INDEX INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "columns INTEGER NOT NULL, "
                        + "wagers INTEGER NOT NULL, "
                        + "FOREIGN KEY (gameID, drawID) REFERENCES content(gameID, drawID) ON DELETE CASCADE ON UPDATE RESTRICT)";
                Statement statement = connection.createStatement();
                statement.executeUpdate(createTableSQL);
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Winning Numbers Bonus Table constructor
    public static void createWNBTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "WINNINGNUMBERSBONUS")) {
                String createTableSQL = "CREATE TABLE winningNumbersBonus ("
                        + "INDEX INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "bonus INTEGER NOT NULL,"
                        + "FOREIGN KEY (gameID, drawID) REFERENCES content(gameID, drawID) ON DELETE CASCADE ON UPDATE RESTRICT)";
                Statement statement = connection.createStatement();
                statement.executeUpdate(createTableSQL);
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Table constructor
    public static void createWNLTable() {
        try {
            Connection connection = DbConnect.connect();
            if(!DbConnect.tableExists(connection, "WINNINGNUMBERSLIST")) {
                String createTableSQL = "CREATE TABLE winningNumbersList ("
                        + "INDEX INTEGER PRIMARY KEY NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
                        + "gameID INTEGER NOT NULL, "
                        + "drawID INTEGER NOT NULL, "
                        + "number INTEGER NOT NULL,"                        
                        + "FOREIGN KEY (gameID, drawID) REFERENCES content(gameID, drawID) ON DELETE CASCADE ON UPDATE RESTRICT)";
                Statement statement = connection.createStatement();
                statement.executeUpdate(createTableSQL);
                statement.close();
                connection.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    /*----------------------DROP TABLES SECTOIN-----------------------*/
    //Method to drop existing Content table
    public static void dropContentTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE content";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Method to drop existing Price Points table
    public static void dropPPTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE pricePoints";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Method to drop existing Prize Categories table
    public static void dropPCTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE prizeCategories";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Method to drop existing Wager Statistics table
    public static void dropWSTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE wagerStatistics";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Method to drop existing Winning Numbers Bonus table
    public static void dropWNBTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE winningNumbersBonus";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
    
    //Method to drop existing Winning Numnbers List table
    public static void dropWNLTable() {
        try {
            Connection connection = DbConnect.connect();
            String dropTableSQL = "DROP TABLE winningNumbersList";    
            Statement statement = connection.createStatement();
            statement.executeUpdate(dropTableSQL);
            statement.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(DBTablesManager.class.getName()).log(Level.SEVERE, null, ex);          
        }
    }
}
